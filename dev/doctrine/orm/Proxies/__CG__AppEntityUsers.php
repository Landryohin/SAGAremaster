<?php

namespace Proxies\__CG__\App\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Users extends \App\Entity\Users implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'email', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'nom', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'prenom', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'roles', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'niveau', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'zone', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'status', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'password', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'documents', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'directions', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'divisions', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'services', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'directionOwners', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'divisionOwners', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'serviceOwners', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'secretariatOwners', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'typeDocumentOwners', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'Owner', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'userOwners', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'affectations', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'postes', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'posteOwners', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'AffectationAgents'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'email', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'nom', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'prenom', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'roles', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'niveau', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'zone', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'status', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'password', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'documents', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'directions', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'divisions', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'services', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'directionOwners', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'divisionOwners', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'serviceOwners', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'secretariatOwners', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'typeDocumentOwners', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'Owner', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'userOwners', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'affectations', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'postes', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'posteOwners', '' . "\0" . 'App\\Entity\\Users' . "\0" . 'AffectationAgents'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Users $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail(string $email): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserIdentifier(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserIdentifier', []);

        return parent::getUserIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', []);

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoles(array $roles): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoles', [$roles]);

        return parent::setRoles($roles);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword(string $password): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$password]);

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function eraseCredentials(): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'eraseCredentials', []);

        parent::eraseCredentials();
    }

    /**
     * {@inheritDoc}
     */
    public function getDocuments(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDocuments', []);

        return parent::getDocuments();
    }

    /**
     * {@inheritDoc}
     */
    public function addDocument(\App\Entity\Documents $document): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDocument', [$document]);

        return parent::addDocument($document);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDocument(\App\Entity\Documents $document): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDocument', [$document]);

        return parent::removeDocument($document);
    }

    /**
     * {@inheritDoc}
     */
    public function getDirections(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDirections', []);

        return parent::getDirections();
    }

    /**
     * {@inheritDoc}
     */
    public function addDirection(\App\Entity\Directions $direction): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDirection', [$direction]);

        return parent::addDirection($direction);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDirection(\App\Entity\Directions $direction): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDirection', [$direction]);

        return parent::removeDirection($direction);
    }

    /**
     * {@inheritDoc}
     */
    public function getDivisions(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDivisions', []);

        return parent::getDivisions();
    }

    /**
     * {@inheritDoc}
     */
    public function addDivision(\App\Entity\Divisions $division): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDivision', [$division]);

        return parent::addDivision($division);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDivision(\App\Entity\Divisions $division): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDivision', [$division]);

        return parent::removeDivision($division);
    }

    /**
     * {@inheritDoc}
     */
    public function getServices(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getServices', []);

        return parent::getServices();
    }

    /**
     * {@inheritDoc}
     */
    public function addService(\App\Entity\Services $service): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addService', [$service]);

        return parent::addService($service);
    }

    /**
     * {@inheritDoc}
     */
    public function removeService(\App\Entity\Services $service): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeService', [$service]);

        return parent::removeService($service);
    }

    /**
     * {@inheritDoc}
     */
    public function getNiveau(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNiveau', []);

        return parent::getNiveau();
    }

    /**
     * {@inheritDoc}
     */
    public function setNiveau($niveau)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNiveau', [$niveau]);

        return parent::setNiveau($niveau);
    }

    /**
     * {@inheritDoc}
     */
    public function getZone(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getZone', []);

        return parent::getZone();
    }

    /**
     * {@inheritDoc}
     */
    public function setZone($zone)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setZone', [$zone]);

        return parent::setZone($zone);
    }

    /**
     * {@inheritDoc}
     */
    public function getNom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNom', []);

        return parent::getNom();
    }

    /**
     * {@inheritDoc}
     */
    public function setNom($nom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNom', [$nom]);

        return parent::setNom($nom);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrenom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrenom', []);

        return parent::getPrenom();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrenom($prenom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrenom', [$prenom]);

        return parent::setPrenom($prenom);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getDirectionOwners(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDirectionOwners', []);

        return parent::getDirectionOwners();
    }

    /**
     * {@inheritDoc}
     */
    public function addDirectionOwner(\App\Entity\Directions $directionOwner): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDirectionOwner', [$directionOwner]);

        return parent::addDirectionOwner($directionOwner);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDirectionOwner(\App\Entity\Directions $directionOwner): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDirectionOwner', [$directionOwner]);

        return parent::removeDirectionOwner($directionOwner);
    }

    /**
     * {@inheritDoc}
     */
    public function getDivisionOwners(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDivisionOwners', []);

        return parent::getDivisionOwners();
    }

    /**
     * {@inheritDoc}
     */
    public function addDivisionOwner(\App\Entity\Divisions $divisionOwner): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDivisionOwner', [$divisionOwner]);

        return parent::addDivisionOwner($divisionOwner);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDivisionOwner(\App\Entity\Divisions $divisionOwner): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDivisionOwner', [$divisionOwner]);

        return parent::removeDivisionOwner($divisionOwner);
    }

    /**
     * {@inheritDoc}
     */
    public function getServiceOwners(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getServiceOwners', []);

        return parent::getServiceOwners();
    }

    /**
     * {@inheritDoc}
     */
    public function addServiceOwner(\App\Entity\Services $serviceOwner): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addServiceOwner', [$serviceOwner]);

        return parent::addServiceOwner($serviceOwner);
    }

    /**
     * {@inheritDoc}
     */
    public function removeServiceOwner(\App\Entity\Services $serviceOwner): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeServiceOwner', [$serviceOwner]);

        return parent::removeServiceOwner($serviceOwner);
    }

    /**
     * {@inheritDoc}
     */
    public function getSecretariatOwners(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSecretariatOwners', []);

        return parent::getSecretariatOwners();
    }

    /**
     * {@inheritDoc}
     */
    public function addSecretariatOwner(\App\Entity\Secretariats $secretariatOwner): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSecretariatOwner', [$secretariatOwner]);

        return parent::addSecretariatOwner($secretariatOwner);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSecretariatOwner(\App\Entity\Secretariats $secretariatOwner): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSecretariatOwner', [$secretariatOwner]);

        return parent::removeSecretariatOwner($secretariatOwner);
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeDocumentOwners(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeDocumentOwners', []);

        return parent::getTypeDocumentOwners();
    }

    /**
     * {@inheritDoc}
     */
    public function addTypeDocumentOwner(\App\Entity\TypeDocuments $typeDocumentOwner): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTypeDocumentOwner', [$typeDocumentOwner]);

        return parent::addTypeDocumentOwner($typeDocumentOwner);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTypeDocumentOwner(\App\Entity\TypeDocuments $typeDocumentOwner): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTypeDocumentOwner', [$typeDocumentOwner]);

        return parent::removeTypeDocumentOwner($typeDocumentOwner);
    }

    /**
     * {@inheritDoc}
     */
    public function getOwner(): ?\App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOwner', []);

        return parent::getOwner();
    }

    /**
     * {@inheritDoc}
     */
    public function setOwner(?\App\Entity\Users $Owner): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOwner', [$Owner]);

        return parent::setOwner($Owner);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserOwners(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserOwners', []);

        return parent::getUserOwners();
    }

    /**
     * {@inheritDoc}
     */
    public function addUserOwner(\App\Entity\Users $userOwner): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUserOwner', [$userOwner]);

        return parent::addUserOwner($userOwner);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUserOwner(\App\Entity\Users $userOwner): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUserOwner', [$userOwner]);

        return parent::removeUserOwner($userOwner);
    }

    /**
     * {@inheritDoc}
     */
    public function getAffectations(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAffectations', []);

        return parent::getAffectations();
    }

    /**
     * {@inheritDoc}
     */
    public function addAffectation(\App\Entity\Affectations $affectation): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAffectation', [$affectation]);

        return parent::addAffectation($affectation);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAffectation(\App\Entity\Affectations $affectation): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAffectation', [$affectation]);

        return parent::removeAffectation($affectation);
    }

    /**
     * {@inheritDoc}
     */
    public function getPostes(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPostes', []);

        return parent::getPostes();
    }

    /**
     * {@inheritDoc}
     */
    public function addPoste(\App\Entity\Postes $poste): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPoste', [$poste]);

        return parent::addPoste($poste);
    }

    /**
     * {@inheritDoc}
     */
    public function removePoste(\App\Entity\Postes $poste): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePoste', [$poste]);

        return parent::removePoste($poste);
    }

    /**
     * {@inheritDoc}
     */
    public function getPosteOwners(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPosteOwners', []);

        return parent::getPosteOwners();
    }

    /**
     * {@inheritDoc}
     */
    public function addPosteOwner(\App\Entity\Postes $posteOwner): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPosteOwner', [$posteOwner]);

        return parent::addPosteOwner($posteOwner);
    }

    /**
     * {@inheritDoc}
     */
    public function removePosteOwner(\App\Entity\Postes $posteOwner): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePosteOwner', [$posteOwner]);

        return parent::removePosteOwner($posteOwner);
    }

    /**
     * {@inheritDoc}
     */
    public function getAffectationAgents(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAffectationAgents', []);

        return parent::getAffectationAgents();
    }

    /**
     * {@inheritDoc}
     */
    public function addAffectationAgent(\App\Entity\Affectations $affectationAgent): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addAffectationAgent', [$affectationAgent]);

        return parent::addAffectationAgent($affectationAgent);
    }

    /**
     * {@inheritDoc}
     */
    public function removeAffectationAgent(\App\Entity\Affectations $affectationAgent): \App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeAffectationAgent', [$affectationAgent]);

        return parent::removeAffectationAgent($affectationAgent);
    }

}
