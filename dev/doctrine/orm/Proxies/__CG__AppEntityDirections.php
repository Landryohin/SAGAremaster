<?php

namespace Proxies\__CG__\App\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Directions extends \App\Entity\Directions implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Directions' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Directions' . "\0" . 'Code', '' . "\0" . 'App\\Entity\\Directions' . "\0" . 'Services', '' . "\0" . 'App\\Entity\\Directions' . "\0" . 'Libelle', '' . "\0" . 'App\\Entity\\Directions' . "\0" . 'Directeur', '' . "\0" . 'App\\Entity\\Directions' . "\0" . 'status', '' . "\0" . 'App\\Entity\\Directions' . "\0" . 'secretariats', '' . "\0" . 'App\\Entity\\Directions' . "\0" . 'Owner', '' . "\0" . 'App\\Entity\\Directions' . "\0" . 'typeDocuments'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Directions' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Directions' . "\0" . 'Code', '' . "\0" . 'App\\Entity\\Directions' . "\0" . 'Services', '' . "\0" . 'App\\Entity\\Directions' . "\0" . 'Libelle', '' . "\0" . 'App\\Entity\\Directions' . "\0" . 'Directeur', '' . "\0" . 'App\\Entity\\Directions' . "\0" . 'status', '' . "\0" . 'App\\Entity\\Directions' . "\0" . 'secretariats', '' . "\0" . 'App\\Entity\\Directions' . "\0" . 'Owner', '' . "\0" . 'App\\Entity\\Directions' . "\0" . 'typeDocuments'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Directions $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getCode(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCode', []);

        return parent::getCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setCode(string $Code): \App\Entity\Directions
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCode', [$Code]);

        return parent::setCode($Code);
    }

    /**
     * {@inheritDoc}
     */
    public function getServices(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getServices', []);

        return parent::getServices();
    }

    /**
     * {@inheritDoc}
     */
    public function addServices(\App\Entity\Services $Services): \App\Entity\Directions
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addServices', [$Services]);

        return parent::addServices($Services);
    }

    /**
     * {@inheritDoc}
     */
    public function removeServices(\App\Entity\Services $Services): \App\Entity\Directions
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeServices', [$Services]);

        return parent::removeServices($Services);
    }

    /**
     * {@inheritDoc}
     */
    public function getLibelle(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLibelle', []);

        return parent::getLibelle();
    }

    /**
     * {@inheritDoc}
     */
    public function setLibelle(string $Libelle): \App\Entity\Directions
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLibelle', [$Libelle]);

        return parent::setLibelle($Libelle);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getDirecteur(): ?\App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDirecteur', []);

        return parent::getDirecteur();
    }

    /**
     * {@inheritDoc}
     */
    public function setDirecteur(?\App\Entity\Users $Directeur): \App\Entity\Directions
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDirecteur', [$Directeur]);

        return parent::setDirecteur($Directeur);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getSecretariats(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSecretariats', []);

        return parent::getSecretariats();
    }

    /**
     * {@inheritDoc}
     */
    public function addSecretariat(\App\Entity\Secretariats $secretariat): \App\Entity\Directions
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSecretariat', [$secretariat]);

        return parent::addSecretariat($secretariat);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSecretariat(\App\Entity\Secretariats $secretariat): \App\Entity\Directions
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSecretariat', [$secretariat]);

        return parent::removeSecretariat($secretariat);
    }

    /**
     * {@inheritDoc}
     */
    public function getOwner(): ?\App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOwner', []);

        return parent::getOwner();
    }

    /**
     * {@inheritDoc}
     */
    public function setOwner(?\App\Entity\Users $Owner): \App\Entity\Directions
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOwner', [$Owner]);

        return parent::setOwner($Owner);
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeDocuments(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeDocuments', []);

        return parent::getTypeDocuments();
    }

    /**
     * {@inheritDoc}
     */
    public function addTypeDocument(\App\Entity\TypeDocuments $typeDocument): \App\Entity\Directions
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTypeDocument', [$typeDocument]);

        return parent::addTypeDocument($typeDocument);
    }

    /**
     * {@inheritDoc}
     */
    public function removeTypeDocument(\App\Entity\TypeDocuments $typeDocument): \App\Entity\Directions
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeTypeDocument', [$typeDocument]);

        return parent::removeTypeDocument($typeDocument);
    }

}
